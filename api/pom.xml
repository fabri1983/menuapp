<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.fabri1983.menuapp</groupId>
	<artifactId>api</artifactId>
	<name>Menu App Api</name>
	<url>https://github.com/fabri1983/menuapp</url>

	<parent>
		<groupId>org.fabri1983.menuapp</groupId>
		<artifactId>menuapp</artifactId>
		<version>1.0.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	
	<dependencies>
	
		<dependency>
			<groupId>org.fabri1983.menuapp</groupId>
			<artifactId>core</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.fabri1983.menuapp</groupId>
			<artifactId>protocol</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>io.reactivex</groupId>
			<artifactId>rxjava</artifactId>
		</dependency>

		<dependency>
            <groupId>ru.vyarus</groupId>
            <artifactId>dropwizard-guicey</artifactId>
        </dependency>

		<dependency>
			<groupId>io.smartmachine</groupId>
			<artifactId>dropwizard-couchbase</artifactId>
		</dependency>

		<dependency>
			<groupId>com.smoketurner</groupId>
			<artifactId>dropwizard-swagger</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>

		<dependency>
			<groupId>io.dropwizard</groupId>
			<artifactId>dropwizard-testing</artifactId>
		</dependency>

		<dependency>
			<groupId>io.takari.junit</groupId>
			<artifactId>takari-cpsuite</artifactId>
		</dependency>

		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
		</dependency>

		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
		</dependency>
		
	</dependencies>

	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<server.config.props>filters/profiles/server-config-dev.properties</server.config.props>
				<overrider.props>filters/overrider/local.overrider.properties</overrider.props>
			</properties>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<server.config.props>filters/profiles/server-config-test.properties</server.config.props>
				<overrider.props>filters/overrider/empty.overrider.properties</overrider.props>
			</properties>
		</profile>
		<profile>
			<id>stage</id>
			<properties>
				<server.config.props>filters/profiles/server-config-stage.properties</server.config.props>
				<overrider.props>filters/overrider/empty.overrider.properties</overrider.props>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<server.config.props>filters/profiles/server-config-prod.properties</server.config.props>
				<overrider.props>filters/overrider/empty.overrider.properties</overrider.props>
			</properties>
		</profile>
	</profiles>

	<build>
		<resources>
			<!-- Normal resource processing -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<!-- exclude from being filtered -->
				<excludes>
					<exclude>filters/*</exclude>
				</excludes>
				<!--  which folder/files we want to be filtered and copied to target -->
				<includes>
					<include>server-config.yml</include>
				</includes>
				<targetPath></targetPath> <!-- leave empty so filtered files go at jar root -->
			</resource>
		</resources>
		<filters>
			<filter>src/main/resources/${server.config.props}</filter>
			<filter>src/main/resources/${overrider.props}</filter>
		</filters>
		
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>false</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<inherited>false</inherited>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target name="Ant Task. Create file if not exist">
								<property name="ffile" value="src/main/resources/${overrider.props}" />
								<ac:if xmlns:ac="antlib:net.sf.antcontrib">
									<available file="${ffile}" />
									<then>
										<echo>File exist. Nothing to do.</echo>
									</then>
									<else>
										<echo file="${ffile}" append="false" message="# This file is used by the last &lt;filter&gt; so it overrides every property using those you define in this file.${line.separator}" />
										<echo>File created.</echo>
									</else>
								</ac:if>
							</target>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>1.0b3</version>
					    <exclusions>
						<exclusion>
							<groupId>ant</groupId>
							<artifactId>ant</artifactId>
						</exclusion>
					    </exclusions>
					  </dependency>
					  <dependency>
					    <groupId>org.apache.ant</groupId>
					    <artifactId>ant-nodeps</artifactId>
					    <version>1.8.1</version>
					  </dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.plugin.version}</version>
				<configuration>
					<includes>
                        <include>**/UnitTestsSuite.class</include>
                    </includes>
				</configuration>
			</plugin>
			<plugin>
				<!-- This plugin provides the capability to package the artifact in an uber-jar, including its dependencies 
				and to shade (i.e. rename) the packages of some of the dependencies if necessary -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>${mave.shade.plugin.version}</version>
				<configuration>
					<!-- disable creation of reduced pom because can't handle tag <ac:if> from ant task declared in the maven ant plugin section -->
					<createDependencyReducedPom>false</createDependencyReducedPom>
					<filters>
						<filter>
							<artifact>*:*</artifact>
							<!-- exclude private keys -->
							<excludes>
								<exclude>META-INF/*.SF</exclude>
								<exclude>META-INF/*.DSA</exclude>
								<exclude>META-INF/*.RSA</exclude>
							</excludes>
						</filter>
					</filters>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.fabri1983.menuapp.api.app.MenuAppApplication</mainClass>
								</transformer>
							</transformers>
							<artifactSet>
								<excludes>
									<exclude>classworlds:classworlds</exclude>
									<exclude>junit:junit</exclude>
									<exclude>jmock:*</exclude>
									<exclude>org.apache.maven:lib:tests</exclude>
									<exclude>log4j:log4j:jar:</exclude>
								</excludes>
							</artifactSet>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	
</project>
